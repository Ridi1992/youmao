package com.lester.youmao;

import java.util.Set;

import org.json.JSONException;
import org.json.JSONObject;
import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.LocationClientOption.LocationMode;
import com.google.gson.reflect.TypeToken;
import com.sanmi.http.Constants;
import com.sanmi.http.JsonUtil;
import com.sanmi.http.PublicRequest;
import android.annotation.SuppressLint;
import android.app.Application;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.graphics.Point;
import android.os.Handler;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;
import android.view.WindowManager;
import android.widget.Toast;

/**
 * 软件应用?
 * 
 * @author yang_qingan
 * 
 */
public class MyApplication extends Application {
	/************* map ***********************/
	public LocationClient mLocationClient;
	public MyLocationListener mMyLocationListener;

	public static double nlatitude = 0;

	public static double nlontitude = 0;

	public boolean checkrep = false;// 查看医师回复页面默认为未打开,打开时要进行消息刷新

	private myLocation myLocation;

	public static Boolean havelocation = false;
	/************* map ***********************/

	protected static MyApplication application;

	public void onCreate() {
		super.onCreate();
		application = this;
		/************* map ***********************/
		mLocationClient = new LocationClient(this.getApplicationContext());
		mMyLocationListener = new MyLocationListener();
		mLocationClient.registerLocationListener(mMyLocationListener);
		initLocation();
		mLocationClient.start();
		/************* map ***********************/
	}

	public void getmyLocation(myLocation myLocation) {
		this.myLocation = myLocation;
		if (!havelocation) {
			// mLocationClient.start();
			myLocation.result(0, 0, false);
		} else {
			myLocation.result(nlatitude, nlontitude, true);
		}
		myLocation = null;
	}

	/**
	 * 初始化百度地图
	 */
	private void initLocation() {
		LocationMode tempMode = LocationMode.Hight_Accuracy;
		String tempcoor = "gcj02";
		LocationClientOption option = new LocationClientOption();
		option.setLocationMode(tempMode);// 可选，默认高精度，设置定位模式，高精度，低功耗，仅设备
		option.setCoorType(tempcoor);// 可选，默认gcj02，设置返回的定位结果坐标系，
		int span = 10000;
		option.setScanSpan(span);// 可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的
		option.setIsNeedAddress(true);// 可选，设置是否需要地址信息，默认不需要
		option.setOpenGps(true);// 可选，默认false,设置是否使用gps
		option.setLocationNotify(true);// 可选，默认false，设置是否当gps有效时按照1S1次频率输出GPS结果
		option.setIgnoreKillProcess(true);// 可选，默认true，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认不杀死
		option.setEnableSimulateGps(false);// 可选，默认false，设置是否需要过滤gps仿真结果，默认需要
		option.setIsNeedLocationDescribe(true);// 可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”
		option.setIsNeedLocationPoiList(true);// 可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到
		mLocationClient.setLocOption(option);
	}

	/**
	 * 百度地图回调
	 * 
	 * @author Administrator
	 * 
	 */
	public interface myLocation {

		void result(double nlatitude, double nlontitude, boolean success);

	}

	/**
	 * 百度地图
	 * 
	 * @author Administrator
	 * 
	 */
	public class MyLocationListener implements BDLocationListener {
		@Override
		public void onReceiveLocation(BDLocation location) {
			// Receive Location
			StringBuffer sb = new StringBuffer(256);
			sb.append("time : ");
			sb.append(location.getTime());
			sb.append("\nerror code : ");
			sb.append(location.getLocType());
			sb.append("\nlatitude : ");
			sb.append(location.getLatitude());
			sb.append("\nlontitude : ");
			sb.append(location.getLongitude());
			sb.append("\nradius : ");
			sb.append(location.getRadius());
			System.out.println("定位结果" + sb.toString());
			if (location.getLocType() == BDLocation.TypeGpsLocation
					|| location.getLocType() == BDLocation.TypeNetWorkLocation
					|| location.getLocType() == BDLocation.TypeOffLineLocation
					|| location.getLocType() == BDLocation.TypeCacheLocation) {// 定位成功
				nlatitude = location.getLatitude();
				nlontitude = location.getLongitude();
				mLocationClient.stop();// 停止定位
				// if(myLocation!=null){
				// myLocation.result(nlatitude,nlontitude,true);
				havelocation = true;
				// }
			} else {
				havelocation = false;
				// if(myLocation!=null){
				// myLocation.result(nlatitude,nlontitude,false);
				// }
			}
			// myLocation = null;
		}
	}

	/**
	 * 获得应用实例
	 * 
	 * @return
	 */
	public static MyApplication getApplication() {
		return application;
	}
}
